/**
 * fevvelasquez 2021, coding exercises about Java JDBC API Basis.
 */
package me.fevvelasquez.jdbc.api.basis;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Executor of multiple Statement instances within a single database connection.
 * 
 * @version 0.1.
 * @author fevvelasquez@gmail.com
 */
public class StatementExecutor {
	private final Connection connection;

	private StatementExecutor(String url, String username, String password) throws SQLException {
		// Pre-JDBC 4.0 drivers need: Class.forName("com.mysql.jdbc.Driver");
		this.connection = DriverManager.getConnection(url, username, password);
	}

	/**
	 * Get an Executor instance connected to {@code url}.
	 * 
	 * @param url      A valid jdbc-connection-url
	 *                 "jdbc:provider:host:port:database-name".<br>
	 *                 Examples: <br>
	 *                 "jdbc:mysql://localhost:3306/store"<br>
	 *                 "jdbc:oracle:thin:@localhost:1521:orcl"<br>
	 *                 "jdbc:derby:localhost:1521:productDB"
	 * @param username A valid user name.
	 * @param password A valid user password.
	 */
	public static StatementExecutor getInstance(String url, String username, String password) {
		try {
			return new StatementExecutor(url, username, password);
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		return null;
	}

	/**
	 * Create a Statement instance and execute the given SQL statement.
	 * 
	 * @param sqlStatement A valid SQL statement.<br>
	 *                     Examples: <br>
	 *                     "SELECT * FROM products WHERE product_id IN (1,2,3)" <br>
	 *                     "UPDATE products SET name = 'best product' WHERE
	 *                     product_id = 1"
	 * @return The results generated by the SQL Statement execution.
	 */
	public StatementResult executeStatement(String sqlStatement) {
		Statement statement;
		boolean isQuery;
		ResultSet resultset;
		int rowsAffected;

		try {
			statement = connection.createStatement();
			isQuery = statement.execute(sqlStatement);
			resultset = isQuery ? statement.getResultSet() : null;
			rowsAffected = isQuery ? 0 : statement.getUpdateCount();
			return new StatementResult(statement, isQuery, resultset, rowsAffected);
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		return null;

	}

	/**
	 * Release Connection resources.
	 */
	public void close() throws SQLException {
		connection.close();
		System.out.println("Connection closed.");
	}

}
